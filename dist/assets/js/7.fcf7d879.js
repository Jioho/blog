(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{364:function(o,s,t){"use strict";t.r(s);var e=t(43),a=Object(e.a)({},(function(){var o=this,s=o.$createElement,t=o._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":o.$parent.slotKey}},[t("h1",{attrs:{id:"js-进阶"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js-进阶"}},[o._v("#")]),o._v(" JS 进阶")]),o._v(" "),t("h2",{attrs:{id:"common-js-和-es6-中模块引入的区别？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#common-js-和-es6-中模块引入的区别？"}},[o._v("#")]),o._v(" common.js 和 es6 中模块引入的区别？")]),o._v(" "),t("p",[o._v("CommonJS 是一种模块规范，最初被应用于 Nodejs，成为 Nodejs 的模块规范。运行在浏览器端的 JavaScript 由于也缺少类似的规范，在 ES6 出来之前，前端也实现了一套相同的模块规范 (例如: AMD)，用来对前端模块进行管理。自 ES6 起，引入了一套新的 ES6 Module 规范，在语言标准的层面上实现了模块功能，而且实现得相当简单，有望成为浏览器和服务器通用的模块解决方案。但目前浏览器对 ES6 Module 兼容还不太好，我们平时在 Webpack 中使用的 export 和 import，会经过 Babel 转换为 CommonJS 规范。在使用上的差别主要有：")]),o._v(" "),t("ul",[t("li",[o._v("CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。")]),o._v(" "),t("li",[o._v("CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。")]),o._v(" "),t("li",[o._v("CommonJs 是单个值导出，ES6 Module 可以导出多个")]),o._v(" "),t("li",[o._v("CommonJs 是动态语法可以写在判断里，ES6 Module 静态语法只能写在顶层")]),o._v(" "),t("li",[o._v("CommonJs 的 this 是当前模块，ES6 Module 的 this 是 undefined")])]),o._v(" "),t("h2",{attrs:{id:"谈一下js的类型转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#谈一下js的类型转换"}},[o._v("#")]),o._v(" 谈一下JS的类型转换")]),o._v(" "),t("p",[o._v("JS的类型转换分为："),t("code",[o._v("显式类型转换")]),o._v("、"),t("code",[o._v("隐式类型转换")])])])}),[],!1,null,null,null);s.default=a.exports}}]);