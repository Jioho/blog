(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{470:function(t,a,s){"use strict";s.r(a);var e=s(15),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"说出-和-区别，什么情况用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#说出-和-区别，什么情况用"}},[t._v("#")]),t._v(" 说出 == 和 ===区别，什么情况用 ==")]),t._v(" "),s("ol",[s("li",[t._v("== 叫做 "),s("code",[t._v("相等运算符")]),t._v(" ，=== 叫做 "),s("code",[t._v("严格运算符")])]),t._v(" "),s("li",[t._v("使用 "),s("code",[t._v("==")]),t._v(" 的时候，如果 2 边的值类型不一致，会自动转换为同一类型在比较\n"),s("code",[t._v("如： 1 == '1' // true")])]),t._v(" "),s("li",[t._v("使用 "),s("code",[t._v("===")]),t._v(" 的时候，不会进行类型转换，必须类型一致，值也一致，才返回 true")])]),t._v(" "),s("p",[s("strong",[t._v("看部分题目")])]),t._v(" "),s("h2",{attrs:{id:""}},[s("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")]),t._v(" [] == ![]")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("查看解析")]),t._v(" "),s("ul",[s("li",[t._v("[] == ![]")]),t._v(" "),s("li",[t._v("[] == !true // ! 操作符的优先级高于 == ，所以先执行 ! 操作")]),t._v(" "),s("li",[t._v("[] == false // !true 得到的是 false")]),t._v(" "),s("li",[t._v("[] == 0 //比较规则 1：如果值为 true 或 false，则转成 1 或 0 来继续比较")]),t._v(" "),s("li",[t._v("[] == 0 //执行左侧的 [] 的 valueOf 方法，而 [] 是对象，所以 [].valueOf() 返回本身[]")]),t._v(" "),s("li",[t._v('"" == 0 //执行左侧的 [] 的 toString 方法')]),t._v(" "),s("li",[t._v('[].toString() 返回 ""0 == 0 //比较规则 2：如果一个值是数字，一个值是字符串，则把字符串转换为数字，再进行比较，"" 转成数字是 0。最终是执行 0 == 0 ，结果为 true')])]),t._v(" "),s("p",[t._v("比较结果为 true 是因为他们在不断转换的过程中，最后转成了 0 和 0 比较，所以返回了 true")])]),t._v(" "),s("h2",{attrs:{id:"nan-nan"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nan-nan"}},[t._v("#")]),t._v(" NaN === NaN")]),t._v(" "),s("p",[t._v("简而言之，NaN 代表“不是数字”，仅因为一个值不是数字，而另一个值不是数字并不意味着这些变量。缺点是您无法真正检查变量是否正在使用 NaN 使用 myVariable === NaN。可以使用 "),s("code",[t._v("Number.isNaN()")]),t._v(" 功能或"),s("code",[t._v("myVariable！== myVariable")]),t._v(" 进行检查。")])])}),[],!1,null,null,null);a.default=n.exports}}]);